/*
*
*  使用uart2 来和zigbee进行交互
*
*/

#include <board.h>
#include <rtthread.h>


#ifdef  RT_USING_COMPONENTS_INIT
#include <components.h>
#endif  /* RT_USING_COMPONENTS_INIT */

#ifdef RT_USING_LWIP
#include <lwip/sys.h>
#include <lwip/api.h>
#include <netif/ethernetif.h>
#include <lwip/sockets.h>
#include <lwip/dns.h>
#endif

#include <rtthread.h>
#include "ym_uart_app.h"
#include "zigbee.h"
#include "ym_config.h"

extern ym_uart_t uart_2;


int uart2_init(void)
{
    if(uart_2.uart != RT_NULL)
      goto EXIT;
     uart_2.uart = rt_device_find("uart2");
     if(!uart_2.uart) {
        MY_DEBUG("%s,%d: Can't find uart2\n",__func__,__LINE__);
         goto EXIT;
     }
    rt_device_open(uart_2.uart, RT_DEVICE_OFLAG_RDWR);
    
    return uart_ok;
    
EXIT:
  return uart_err;
}

/* uart pthread entry  */
int uart_read_from_zigbee(void)
{
  /*init*/
  if(uart_2.uart == RT_NULL) {
    if(uart2_init() != uart_ok) {
      MY_DEBUG("%s,%d: uart 2 init faild !\n",__func__,__LINE__);
      goto EXIT;
    }
  }
  
  /* recv data from zigbee */
  char recv_buff[UART_RECV_SIZE] = {0};
  int read_size = uart_recv(recv_buff);
  
  /* if read error */
  if(read_size != UART_RECV_SIZE) {
    goto EXIT;
  }
  
  /* check msg type */
  char msg_type = check_uart_msg_type(recv_buff);
  uart_2.rx_msg.msg_type = msg_type;
  
//  MY_DEBUG("%s,%d: uart recive msg is %02X\n", msg_type);
  switch(msg_type) {
    /* quer end device short address */
      case YM_QUER_SHORT_ADDR_MSG:
        write_to_file(recv_buff);
        break;
        /* zigbee end device off line  msg */
      case YM_DEVICE_OFF_LINE_MSG:
        write_to_file(recv_buff);
        break;
        /* zigbee end device on line msg */
      case YM_DEVICE_ON_LINE_MSG:
        quer_device_short_addr();
        break;
        /* user control zigbee device msg */
      case YM_DEVICE_CONTROL_MSG:
        user_ctrl_msg(recv_buff);
        break;
        /*error msg*/
      default:
        goto EXIT;
  };
  
  return uart_ok;
EXIT:
  return uart_err;
}


/* send cmd to zigbee: get short address, if send success , return 0*/

int uart_send_cmd_to_zigbee(void)
{
   if(uart_2.uart == RT_NULL) {
    if(uart2_init() != uart_ok) {
      MY_DEBUG("%s,%d: uart 2 init faild !\n",__func__,__LINE__);
      goto EXIT;
    }     
  } 
  
    Send_Recv_CMDA_t ym_zigbee_send;
    rt_memset(&ym_zigbee_send, 0, sizeof(ym_zigbee_send));
    
    /* initation Send_Recv_CMDA_t struct */
    ym_zigbee_send.CMD = CMD_NODE_INFO_LOOKUP;
    ym_zigbee_send.ClusterID = CID_NODE_ALLMAC_LOOKUP;
    
    /*into pthread lock */
    rt_enter_critical();
    
    /* send cmd to zigbee */
    
    int write_size = uart_send(&ym_zigbee_send);    
     /* check */
     char buff[UART_RECV_SIZE];
     rt_memset(buff, 0, sizeof(buff));
     int read_size = uart_recv(buff);
     
     if(read_size == UART_RECV_SIZE) {
       Send_Recv_CMDA_t *check = (Send_Recv_CMDA_t*)buff;
       if((check->CMD == CMD_NODE_INFO_LOOKUP) && (check->ClusterID == CID_NODE_ALLMAC_LOOKUP)) {
         MY_DEBUG("%s,%d: send 010b success !\n",__func__,__LINE__);
         /* leave pthread lock */
         rt_exit_critical();         
            return 0;
       }
     }
   
     /* leave pthread lock */
     rt_exit_critical();
    return uart_err;
EXIT:
  return uart_err;
}


/* util :  uart send */
int uart_send(Send_Recv_CMDA_t * zigbee_dev)
{
  if(!uart_2.uart) {
     goto EXIT;
  }
  
  if(!zigbee_dev){
    goto EXIT;
  }
  
  rt_mutex_take(&uart_2.mutex,RT_WAITING_FOREVER);
  int write_size = rt_device_write(uart_2.uart, 0, zigbee_dev, UART_SEND_SIZE);
  rt_mutex_release(&uart_2.mutex);

  return write_size;
EXIT:
  return uart_err;
}


int uart_recv(char * recv_buff)
{
//TODO...
  if(!uart_2.uart) {
    goto EXIT;
  }
  
  if(!recv_buff) {
    goto EXIT;
  }
   
  rt_mutex_take(&uart_2.mutex,RT_WAITING_FOREVER);
  int read_size = rt_device_read(uart_2.uart, 0, recv_buff, UART_RECV_SIZE);
  rt_mutex_release(&uart_2.mutex);
      
  return read_size;
EXIT:
  return uart_err;;

}


/* quer short address */
int quer_device_short_addr()
{
    if(uart_2.uart == RT_NULL) {
        goto EXIT;
  }
  
    Send_Recv_CMDA_t ym_zigbee_send;
    rt_memset(&ym_zigbee_send, 0, sizeof(ym_zigbee_send));
    
    /* initation Send_Recv_CMDA_t struct */
    ym_zigbee_send.CMD = CMD_NODE_INFO_LOOKUP;
    ym_zigbee_send.ClusterID = CID_NODE_ALLMAC_LOOKUP;
        
    int size = uart_send(&ym_zigbee_send);
    
    if( size != 12) {
      MY_DEBUG("%s,%d: send size to zigbee is %d\n", size);
      goto EXIT;
    }
       
    return ym_ok;
EXIT:
  return ym_err;
}

/*
check recive msg type : quer_msg \ off_line_msg \ on_line_msg \ user_control_msg
return msg type value
*/
char check_uart_msg_type(char *buff)
{
  char msg_type = 0x0;
  
  if(!buff) {
    goto EXIT;
  }
  
  Send_Recv_CMDA_t * ym_zigbee_recv = (Send_Recv_CMDA_t*)buff;
  
   if((ym_zigbee_recv->CMD == 0) && (ym_zigbee_recv->ClusterID == 0)){
        goto EXIT;
    }
    /*  if quer network device short address*/
    else if((ym_zigbee_recv->CMD == CMD_NODE_INFO_LOOKUP)&& 
       (ym_zigbee_recv->ClusterID == CID_NODE_ALLMAC_LOOKUP))
    {
        msg_type = YM_QUER_SHORT_ADDR_MSG;
    }
    /*  if network device offline msg */
    else if((ym_zigbee_recv->CMD == CMD_NODE_INFO_LOOKUP)&&
            (ym_zigbee_recv->ClusterID == CID_NODE_OFF_LINE))
    {
        msg_type = YM_DEVICE_OFF_LINE_MSG;
    }
   /* on line msg  */
    else if((ym_zigbee_recv->CMD == CMD_NODE_INFO_LOOKUP)&&
             (ym_zigbee_recv->ClusterID == 0x0D))
    {
        msg_type = YM_DEVICE_ON_LINE_MSG;
    }
    else {
        goto EXIT;
    }  
  
  
  return msg_type;
EXIT:
  return uart_err;
}

int write_to_file(char *buff)
{
  if(!buff) {
    goto EXIT;
  }
  
  Send_Recv_CMDA_t * ym_zigbee_recv = (Send_Recv_CMDA_t*)buff;
  
  if(uart_2.rx_msg.msg_type == YM_DEVICE_OFF_LINE_MSG)
    rt_memset(ym_zigbee_recv->SendNode.Info_mac.mac, 0, 8);

  dev_t ym_zigbee_dev;
  rt_memset(&ym_zigbee_dev, 0, sizeof(ym_zigbee_dev));  
   
  /*short address*/
    ym_zigbee_dev.shortadd = ym_zigbee_recv->SendNode.NwkDest;
    /*if have MAC address, set it, or not, zero mac buff */
    if(ym_zigbee_recv->SendNode.Info_mac.mac)
        memcpy(ym_zigbee_dev.mac,ym_zigbee_recv->SendNode.Info_mac.mac, 8 );
    else
      rt_memset(ym_zigbee_dev.mac, 0, sizeof(ym_zigbee_dev.mac));
    
    /*if control msg*/
    if(uart_2.rx_msg.msg_type == YM_DEVICE_CONTROL_MSG)
        ym_zigbee_dev.stat = ym_zigbee_recv->SendNode.Info_mac.U_info.info.LState.CtrlVal;

    
    /*if MAC == 0   and short address == 0 --> goto*/
    char mac_null = 0;
    int i = 0;
    for(i = 0; i < 8; i++) {
      if(ym_zigbee_recv->SendNode.Info_mac.mac[i] != 0x00) {
            mac_null = 1;
            break;
      }
    }
    if((!mac_null) && (!(ym_zigbee_recv->SendNode.NwkDest)))
      goto EXIT;
   
  /* write uart data to file */
    MY_DEBUG("%s,%d: mac is :\n",__func__,__LINE__);
    MY_DEBUG("%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X", 
             ym_zigbee_dev.mac[0], ym_zigbee_dev.mac[1], ym_zigbee_dev.mac[2],
             ym_zigbee_dev.mac[3], ym_zigbee_dev.mac[4], ym_zigbee_dev.mac[5], 
             ym_zigbee_dev.mac[6],  ym_zigbee_dev.mac[7]);
    MY_DEBUG("\nshor address is : %04X\n", ym_zigbee_dev.shortadd);    
    
 /* write to file */
    if(!change_shortadd_dev(&ym_zigbee_dev) ) {
      MY_DEBUG("%s,%d: change address in file faild !\n",__func__,__LINE__);
      goto EXIT;
    } 
  
  return uart_ok;
  
EXIT:
  return uart_err;
}

/*user control msg deal with*/
int user_ctrl_msg(char *buff)
{
//TODO..
  
  return uart_ok;
}

//struct rx_msg
//{
//    rt_device_t dev;
//    rt_size_t   size;
//};
// 
//static struct rt_messagequeue  rx_mq;
//static char uart_rx_buffer[64];
//static char msg_pool[2048];
// 
//// 串口侦听回调函数
//rt_err_t uart_input(rt_device_t dev, rt_size_t size)
//{
//    struct rx_msg msg;
//    msg.dev = dev;
//    msg.size = size;
//   
//        // 将接收内容放入消息队列
//    rt_mq_send(&rx_mq, &msg, sizeof(struct rx_msg));
//   
//    return RT_EOK;
//}
// 
//// 任务入口函数
//void usr_echo_thread_entry(void* parameter)
//{
//    struct rx_msg msg;
//   
//    rt_device_t device;
//    rt_err_t result = RT_EOK;
//   
//    
//    // 从RT系统中获取串口1设备
//    device = rt_device_find("uart1");
//    if (device != RT_NULL)
//    {
//                           // 指定接收串口内容的回调函数
//        rt_device_set_rx_indicate(device, uart_input);
//                           // 以读写方式打开设备
//        rt_device_open(device, RT_DEVICE_OFLAG_RDWR);
//    }
//    MY_DEBUG("Now : %s, %d \n\r",__func__,__LINE__);
//   
//    while(1)
//    {
//                           // 从消息队列中获取被回调函数放入消息队列中的内容
//        result = rt_mq_recv(&rx_mq, &msg, sizeof(struct rx_msg), 50);
//        if (result == -RT_ETIMEOUT)
//        {
//            // timeout, do nothing
//        }
//       
//        if (result == RT_EOK)
//        {
//            rt_uint32_t rx_length;
//           
//            rx_length = (sizeof(uart_rx_buffer) - 1) > msg.size ?
//                msg.size : sizeof(uart_rx_buffer) - 1;
//           
//            rx_length = rt_device_read(msg.dev, 0, &uart_rx_buffer[0], rx_length);
//            uart_rx_buffer[rx_length] = '\0';
//            // 将内容写回到串口1
//            rt_device_write(device, 0, &uart_rx_buffer[0], rx_length);
//        }
//    }
//}
//// 串口例程初始化函数
//void usr_echo_init(void)
//{
//    rt_thread_t thread ;
//   
//    rt_err_t result; 
//      // 创建消息队列，分配队列存储空间
//    result = rt_mq_init(&rx_mq, "mqt", &msg_pool[0], 128 - sizeof(void*), sizeof(msg_pool), RT_IPC_FLAG_FIFO);
//   
//    if (result != RT_EOK) 
//    { 
//        rt_kprintf("init message queue failed.\n"); 
//        return; 
//    } 
//    // 创建任务线程
//    thread = rt_thread_create("devt",
//        usr_echo_thread_entry, RT_NULL,
//        1024, 25, 7);
//    // 启动任务线程
//    if (thread != RT_NULL) {
//        MY_DEBUG("Now start usart 1 thread!  :%s, %d\n",__func__,__LINE__);
//        rt_thread_startup(thread);
//    }
//}
 







