#include <rtthread.h>
#include "cJSON.h"
#include "ym_json.h"
#include "ym_user.h"
#include "login.h"
#include "dev_opt.h"
#include "white_list.h"
#include "ym_device.h"
#include "ym_uart_app.h"
#include "Interface.h"
#include "zigbee.h"
#include "ym_method.h"

ReadDev  read_dev;

/******************************************/



/****************************************/

/*
@Function : client read zigbee device status
@string : json string  <tcp client --> tcp server>
@return : json string <char*> or RT_NULL, back to client < tcp server ---> tcp client >
*/

char * ym_device_read_status(const char* string)
{
    
    dev_t  dev;
    int i = 0, j = 0;
    rt_memset(&read_dev, 0, sizeof(ReadDev));
    rt_memset(&dev, 0, sizeof(dev));
    /* parsel tcp data */
   read_dev =  read_js_handel(string);
   if(!read_dev.js.flag) {
     MY_DEBUG("%s,%d: parsel tcp data faild !\n\r",__func__,__LINE__);
     goto EXIT;
   }
   /* op */
   read_dev.op = 1;
   
   for(i = 0; i < read_dev.count; i++) {
     memcpy(dev.mac, read_dev.dev[i].device_mac, 8);
     dev.stat = read_dev.dev[i].devcice_progress;
     
     if(!exist_dev(&dev)){ 
       read_dev.op = 0;
       continue ;
     }
     read_dev.dev[i].devcice_progress = dev.stat;
   }
  
 /* packing send data */
   char *device_statu = pack_device_read_status_msg(read_dev);
   if(device_statu) {
//     MY_DEBUG("%s,%d: string is :\n%s\n",__func__,__LINE__,device_statu);
   }else{
     MY_DEBUG("%s,%d: packing faild !\n",__func__,__LINE__);
   }
   
    return device_statu;
EXIT:
  return RT_NULL;
}

/*
@Function : add device to list
@string : json string  <tcp client --> tcp server>
@return : json string <char*> or RT_NULL, back to client < tcp server ---> tcp client >
*/
char * ym_device_add(const char* string)
{
    dev_t  dev;
    int i = 0, j = 0;
    
    rt_memset(&read_dev, 0, sizeof(ReadDev));
    rt_memset(&dev, 0, sizeof(dev));
 
    /* get json */
   read_dev =  read_js_handel(string);
   if(!read_dev.js.flag) {
     MY_DEBUG("%s,%d: parsel tcp data faild !\n\r",__func__,__LINE__);
     goto EXIT;
   }
   /*op*/
   read_dev.op = 1;
   
   /* add device */
   for(i = 0; i < read_dev.count; i++) {
     memcpy(dev.mac, read_dev.dev[i].device_mac, 8);
     dev.stat = read_dev.dev[i].devcice_progress; 
     /* set short address is 0xFFFF */
     dev.shortadd = 0xFFFF;
     
     int ret = add_dev(&dev);
     if(ret == 0){ 
       read_dev.op = 0;
     }else if(ret == 1){
       read_dev.op = 1;
       quer_device_short_addr();
     }
     else if(ret == 2){
        read_dev.op == 2;
//        quer_device_short_addr();
     }
   }
    /* packing data */
    char *add_device = pack_device_add_msg(read_dev);
   if(add_device) {
//     MY_DEBUG("%s,%d: string is \n%s\n",__func__,__LINE__, add_device);
   }else {
     MY_DEBUG("%s,%d: packing faild !\n",__func__,__LINE__);
   }

   return add_device;
EXIT:
  return RT_NULL;
}


/*
@Function : delete device
@string : json string  <tcp client --> tcp server>
@return : json string <char*> or RT_NULL, back to client < tcp server ---> tcp client >
*/
char * ym_device_delete(const char* string)
{
    dev_t  dev;
    int i = 0, j = 0;
    
    rt_memset(&read_dev, 0, sizeof(ReadDev));
    rt_memset(&dev, 0, sizeof(dev));
    /* parsel tcp data */
   read_dev =  read_js_handel(string);
   if(!read_dev.js.flag) {
     MY_DEBUG("%s,%d: parsel tcp data faild !\n\r",__func__,__LINE__);
     goto EXIT;
   }
   /*op*/
   read_dev.op = 1;
   /* rm device */
    for(i = 0; i < read_dev.count; i++) {
     memcpy(dev.mac, read_dev.dev[i].device_mac, 8);
     dev.stat = read_dev.dev[i].devcice_progress; 
     if(!del_dev(&dev)){ 
       read_dev.op = 0;
     }
   }  

 /* packing */
   char * delete_device = pack_device_delete_msg(read_dev);
   if(delete_device) {
//     MY_DEBUG("%s,%d: string is :\n%s\n",__func__,__LINE__, delete_device);
   }else {
     MY_DEBUG("%s,%d: packing faild !\n",__func__,__LINE__);
   }
   
   return delete_device;
   
EXIT:
  return RT_NULL;
}

/*
@Function : control device  <tcp client --- tcp server --- zigbee device>
@string : json string  <tcp client --> tcp server>
@return : json string <char*> or RT_NULL, back to client < tcp server ---> tcp client >
*/

extern ym_uart_t uart_2;
Send_Recv_CMDA_t zigbee_dev;


/*initation normalo dev*/
static void init_light_normal(Send_Recv_CMDA_t *zigbee_dev, const ym_dev_ctl_t *ym_dev, int number)
{
  /* ctrl CMD */
  zigbee_dev->CMD = CMD_LIGHT_OPRT;
  if( (ym_dev->dev+number)->devcice_progress == 0) {
    zigbee_dev->ClusterID = CID_LIGHT_TURN_OFF;
  }else {
    zigbee_dev->ClusterID = CID_LIGHT_TURN_ON;
  }
  
  /* ctrl model */ 
  if((ym_dev->dev+number)->device_style == 0) {
    zigbee_dev->SendNode.Info_mac.U_info.info.LState.CtrlMode = YM_LIGHT_STYLE_SUDDEN;
  }else {
    zigbee_dev->SendNode.Info_mac.U_info.info.LState.CtrlMode = YM_LIGHT_STILE_GRADUAL;
  }
  
  /* ctrl value */
  zigbee_dev->SendNode.Info_mac.U_info.info.LState.CtrlVal = (ym_dev->dev+number)->devcice_progress;
  
  /* device short address */
  zigbee_dev->SendNode.NwkDest = (ym_dev->dev+number)->short_address;
  
  return ;
}

/*
initation color led
*/

static void init_light_color(Send_Recv_CMDA_t *zigbee_dev, const ym_dev_ctl_t *ym_dev, int number)
{
  /* cmd */
  zigbee_dev->CMD = CMD_RGBLED_OPRT;
  zigbee_dev->ClusterID = CID_SET_RGBLED_STATE;
  /*rgb*/
  zigbee_dev->SendNode.Info_mac.U_info.info.ColorL.Red = (ym_dev->dev+number)->device_R;
  zigbee_dev->SendNode.Info_mac.U_info.info.ColorL.Green = (ym_dev->dev+number)->device_G;
  zigbee_dev->SendNode.Info_mac.U_info.info.ColorL.Blue = (ym_dev->dev+number)->device_B;
  
  /*ctrl mode*/
  //todo...
  
  /* ctrl value */
  zigbee_dev->SendNode.Info_mac.U_info.info.LState.CtrlVal =(ym_dev->dev+number)->devcice_progress;
  
  /*short address*/
  zigbee_dev->SendNode.NwkDest = (ym_dev->dev+number)->short_address;
  return ;
  
}

/*
    initation warm and clod led
*/

static void init_light_warm_clod(Send_Recv_CMDA_t *zigbee_dev, const ym_dev_ctl_t *ym_dev, int number)
{
 /*ctrl cmd*/
  zigbee_dev->CMD = CMD_LIGHT_OPRT;
  if((ym_dev->dev+number)->devcice_progress == 0) {
     zigbee_dev->ClusterID = CID_LIGHT_TURN_OFF;   
  }else {
     zigbee_dev->ClusterID = CID_LIGHT_TURN_ON;   
  }
 /*ctrl mode*/
  if((ym_dev->dev+number)->device_style == 0)
    zigbee_dev->SendNode.Info_mac.U_info.info.LState.CtrlMode = YM_LIGHT_STYLE_SUDDEN;
  else {
    zigbee_dev->SendNode.Info_mac.U_info.info.LState.CtrlMode = YM_LIGHT_STILE_GRADUAL;
    zigbee_dev->SendNode.Info_mac.U_info.info.LState.CtrlSelect = (ym_dev->dev+number)->light_style;
  }
  /* ctrl value */
  zigbee_dev->SendNode.Info_mac.U_info.info.LState.CtrlVal = (ym_dev->dev+number)->devcice_progress;
  
  /*short address*/
  zigbee_dev->SendNode.NwkDest = (ym_dev->dev+number)->short_address;
  
  return ;
}


/*switch init*/
static void init_switch(Send_Recv_CMDA_t *zigbee_dev, const ym_dev_ctl_t *ym_dev, int number)
{
 /*ctrl cmd*/
  zigbee_dev->CMD = CMD_SOCKET_OPRT;
  if((ym_dev->dev+number)->devcice_progress == 0) {
     zigbee_dev->ClusterID = CID_SOCKET_TURN_OFF;   
  }else {
     zigbee_dev->ClusterID = CID_SOCKET_TURN_ON;   
  }
 /*ctrl mode*/

  /* ctrl value */
    
  /*short address*/
  zigbee_dev->SendNode.NwkDest = (ym_dev->dev+number)->short_address;
  
  return ;    
}

/* curtains init*/
static void init_curtains(Send_Recv_CMDA_t *zigbee_dev, const ym_dev_ctl_t *ym_dev, int number)
{
//TODO...
  /*ctrl cmd*/
  //...
  
  /*ctrl mode*/
  //....
  
  /* ctrl value */
  //....
  
  /*short address*/
  zigbee_dev->SendNode.NwkDest = (ym_dev->dev+number)->short_address;
  
  return ;  
}

/*
@Function : initation cmd data
@return :
*/

int init_to_zigbee_data(ym_dev_ctl_t *ym_dev, int number)
{
  dev_t dev;
  
  if(number < 0) {
    goto EXIT;
  }
 rt_memset(&zigbee_dev, 0, sizeof(zigbee_dev));
 rt_memset(&dev, 0, sizeof(dev));
 /* cp mac address */
 int i = 0;
 for(i = 0; i < 8; i++)
    dev.mac[i] = (ym_dev->dev+number)->device_mac[i];
 
 /*device stat value*/
 dev.stat = (ym_dev->dev+number)->devcice_progress;
 
 /* get short address */
 rt_uint8_t ret = exist_dev(&dev); 
 if(!ret) {
   (ym_dev->dev+number)->flag = 0;
    ym_dev->flag = 0; 
    goto EXIT;
 }
 
 /* no short address */
 if(0xFFFF == dev.shortadd) {
    (ym_dev->dev+number)->flag = 0;
    ym_dev->flag = 0;
//    quer_device_short_addr();
    goto EXIT;
 }
   
 /*cp shortaddress */
 (ym_dev->dev+number)->short_address = dev.shortadd;
 
 char device_type = (ym_dev->dev+number)->device_type ;
 /* devict type */
 switch(device_type) {
     case YM_LIGHT_NORMALI:
       init_light_normal(&zigbee_dev, ym_dev, number);
       break;
     case YM_LIGHT_COLD:
       init_light_warm_clod(&zigbee_dev, ym_dev, number);
       break;
     case YM_LIGHT_COLOR:
       init_light_color(&zigbee_dev, ym_dev, number);
       break;
     case YM_SWITCH:
       init_switch(&zigbee_dev, ym_dev, number);
       break;       
     case YM_CURTAINS:
       init_curtains(&zigbee_dev, ym_dev, number);
       break;
     default:
       goto EXIT;
 };
 
 /* init zigbee dev */
 MY_DEBUG("%s,%d: mac address is :\n",__func__,__LINE__);
 MY_DEBUG("%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\n", 
          dev.mac[0],dev.mac[1],dev.mac[2],dev.mac[3],
          dev.mac[4],dev.mac[5],dev.mac[6],dev.mac[7]);
 MY_DEBUG("%s,%d: short address is :\n",__func__,__LINE__);
 MY_DEBUG("%04X\n", (ym_dev->dev+number)->short_address);
 
 return ym_ok;
EXIT:
  return ym_err;
}


/*
@function: control device
@parm : json string < tcp client----> tcp server >
@return: json string < tcp server---> tcp client >
*/
char * ym_device_contrl(const char* string)
{
    ym_dev_ctl_t  ym_device;
      
    /* get device parameters */
    rt_memset(&ym_device, 0, sizeof(ym_device));
    ym_device = get_device_param(string);
    
    int i = 0;
    for(i = 0; i < ym_device.number; i++){
      /* initation send data */
        if(init_to_zigbee_data(&ym_device,i) != ym_ok)
          continue;
        
        /*send data to uart 2*/
        int write_size = uart_send(&zigbee_dev);
    }
       
    /* packing data */
     char * ctl_device = pack_device_ctl_msg(ym_device);
    if(ctl_device) {
//      MY_DEBUG("%s,%d: string is :\n%s\n",__func__,__LINE__,ctl_device);
    }else
      MY_DEBUG("%s,%d: packing faild !\n",__func__,__LINE__);
    
    /*free*/
    if(ym_device.dev)
      rt_free(ym_device.dev);
    
    /*return*/
    return ctl_device;
    
EXIT:
    /*free*/
  if(ym_device.dev)
     rt_free(ym_device.dev);  
  return RT_NULL;
}

