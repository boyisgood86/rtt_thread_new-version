#ifndef __YM_JSON_H_
#define __YM_JSON_H_


#include "ym_config.h"
#include "white_list.h"

/* device type */
#define YM_LIGHT_NORMALI    (1)
#define YM_LIGHT_COLD       (2)
#define YM_LIGHT_COLOR      (3)
#define YM_SWITCH           (4)
#define YM_CURTAINS         (5)


/*device_style*/
#define YM_LIGHT_STYLE_SUDDEN     (0)
#define YM_LIGHT_STILE_GRADUAL    (1)

/* warm and clod -- light*/
#define YM_LIGHT_STILE_WARM        (1)
#define YM_LIGHT_STILE_CLOD        (0)


/* support device number */
#define YM_DEVICE_MAX_NUMBER        (50)

typedef unsigned char ym_uchar;
typedef unsigned int ym_uint;

#define LONG_ADDR   (8)
#define SHORT_ADDR  (2)

typedef struct ym_dev_ctrl{
  ym_uchar device_type;         /* device type */
  ym_uchar device_style;        /* the style of control device */
  ym_uchar devcice_progress;    /* device value 0-100 */
  ym_uchar light_style;         /* Warm or cold light */
  ym_uchar device_B;            /* light LED blue */
  ym_uchar device_G;            /* light LED green */
  ym_uchar device_R;            /* light LED red */
  
  char flag;                 /* 0:faild , 1 : success */        
  rt_uint16_t short_address;  /* 2 bytes short address */
  char device_mac[LONG_ADDR]; /* 25 bytes long address */
}ym_dev_ctrl_t;

typedef struct ym_dev_ctl{
    JSON js;     /* basic json item */
    ym_dev_ctrl_t *dev; /* device param */
    ym_uint  number;    /* device number */
    int     flag;   /* operation : 1: success, 0: update device list, */

}ym_dev_ctl_t;


extern rt_uint8_t white_list_enable;

JSON js_handel(const char * const string);

WhiteList white_js_handel(const char * const string);

ReadDev  read_js_handel(const char * const string);

int passwd_js_handle(Passwd_t *ps, const char * const string);

ym_dev_ctl_t get_device_param(const char *  string);




char * pack_admin_msg(white_list_t * whitelist, unsigned int count, JSON *js);
char * pack_normal_msg(void);
char * pack_error_msg(void); 
char * pack_sign_msg(int value,white_list_t * whitelist, unsigned int count, JSON * js);
char * pack_whitelist_msg(WhiteList *wl, char value);
char * pack_new_passwd_msg(Passwd_t * ps, int value);
char * pack_user_delet_msg(deltuser_t user, int value);


char * pack_device_read_status_msg(ReadDev read_dev);
char * pack_device_add_msg(ReadDev op);
char * pack_device_delete_msg(ReadDev op);
char * pack_device_ctl_msg(ym_dev_ctl_t op);


#endif /* __YM_JSON_H_ */
